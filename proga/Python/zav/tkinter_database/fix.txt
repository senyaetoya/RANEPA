На настоящий момент графический интерфейс представляет собой
набор функций, использующих глобальный список полей (entries)
ввода и глобальное хранилище (db). Вместо этого мы могли бы пере-
дать db в вызов функции makeWidgets и организовать передачу обоих
этих объектов обработчикам событий в виде аргументов, восполь-
зовавшись приемом с инструкцией lambda из предыдущего разде-
ла. Хотя для таких маленьких сценариев это и не так важно, стоит
Шаг 5: добавляем графический интерфейс 99
иметь в виду, что явное определение подобных внешних зависимо-
стей делает программный код более простым для понимания и по-
вторного использования в других контекстах.
•• Этот графический интерфейс можно было бы реализовать в виде
класса, чтобы обеспечить поддержку возможности специализации
и присоединения к другим графическим интерфейсам (глобальные
переменные в этом случае могли бы стать атрибутами экземпляра),
хотя повторное использование столь специфического интерфейса
маловероятно.
•• Полезнее было бы передавать функциям в виде параметра кортеж
fieldnames, чтобы в будущем их можно было использовать с другими
типами записей. Программный код в конце сценария также мож-
но было бы оформить в виде функции, принимающей имя файла
хранилища, а в функцию updateRecord можно было бы передавать
функцию, создающую новую запись, чтобы она могла сохранять не
только экземпляры класса Person. Эти усовершенствования выходят
далеко за рамки данного краткого обзора, но их реализация была
бы для вас неплохим упражнением. Позднее я познакомлю вас с еще
одним дополнительным примером, входящим в комплект примеров
к книге, PyForm, в котором используется иной подход к созданию
универсальных форм ввода.
•• Чтобы сделать этот графический интерфейс более дружественным
по отношению к пользователю, можно было бы добавить окно со
списком всех ключей, имеющихся в базе данных, и тем самым упро-
стить просмотр содержимого базы данных. Полезно было бы преду-
смотреть проверку данных перед сохранением, а кроме того, легко
можно было бы добавить клавиши Delete (Удалить) и Clear (Очистить).
Тот факт, что введенные данные интерпретируются как программ-
ный код на языке Python, может доставить массу беспокойств – реа-
лизация простейшей схемы ввода могла бы повысить безопасность.
(Я не буду явно предлагать реализовать эти усовершенствования
в качестве самостоятельного упражнения, но это было бы полезно.)
•• Мы могли бы также реализовать поддержку изменения размеров
окна (как мы узнаем позднее, виджеты могут растягиваться и сжи-
маться вместе с окном) и предоставить возможность вызова методов,
которыми обладают сохраняемые экземпляры классов (в том смыс-
ле, что графический интерфейс позволяет изменить значение поля
pay, но не позволяет вызвать метод giveRaise).
•• Если бы мы планировали распространять этот графический интер-
фейс, мы могли бы упаковать его в самостоятельную выполняемую
программу – скомпилированный двоичный файл (frozen binary) –
с использованием сторонних инструментов, таких как Py2Exe,
PyInstaller и других (дополнительную информацию ищите в Интер-
нете). Такие программы можно запускать, не устанавливая Python